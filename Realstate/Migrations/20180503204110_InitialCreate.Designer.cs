// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Realstate.Models.BaseDatos;
using System;

namespace Realstate.Migrations
{
    [DbContext(typeof(GeoRentingContext))]
    [Migration("20180503204110_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Realstate.Models.BaseDatos.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Account","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Country","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long?>("IdManagement");

                    b.Property<int>("IdProvince");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdManagement");

                    b.HasIndex("IdProvince");

                    b.ToTable("District","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("StatusRegister")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Usercreation")
                        .HasColumnName("usercreation")
                        .HasColumnType("nchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Link","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Management", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("IdRegion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdRegion");

                    b.ToTable("Management","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Parish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdDistrict");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Parish","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Predio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdPropietario")
                        .HasColumnName("idPropietario");

                    b.Property<int?>("IdZonaProspectada")
                        .HasColumnName("idZonaProspectada");

                    b.Property<byte[]>("Image")
                        .HasColumnName("image")
                        .HasColumnType("image");

                    b.Property<string>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("nchar(20)");

                    b.Property<string>("Length")
                        .HasColumnName("length")
                        .HasColumnType("nchar(20)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("StatusRegister")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Usercreation")
                        .HasColumnName("usercreation")
                        .HasColumnType("nchar(50)");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("nchar(20)");

                    b.Property<string>("Zona")
                        .HasColumnName("zona")
                        .HasColumnType("nchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("IdZonaProspectada");

                    b.ToTable("Predio","RentingCore");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdAccount");

                    b.Property<int?>("IdContry")
                        .IsRequired();

                    b.Property<int?>("IdDistrict")
                        .IsRequired();

                    b.Property<int?>("IdLink")
                        .IsRequired();

                    b.Property<int?>("IdParish")
                        .IsRequired();

                    b.Property<int?>("IdProvince")
                        .IsRequired();

                    b.Property<int?>("IdSector")
                        .IsRequired();

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Usercreation")
                        .HasColumnName("usercreation")
                        .HasColumnType("nchar(50)");

                    b.Property<int?>("ZonaId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdContry");

                    b.HasIndex("IdDistrict");

                    b.HasIndex("IdLink");

                    b.HasIndex("IdParish");

                    b.HasIndex("IdProvince");

                    b.HasIndex("IdSector");

                    b.HasIndex("ZonaId");

                    b.ToTable("Project","RentingCore");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Propietario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cedula")
                        .HasColumnName("cedula")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Movil")
                        .HasColumnName("movil")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nchar(10)");

                    b.HasKey("Id");

                    b.ToTable("propietario","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdCountry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Province","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Region","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("IdDistrict");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdDistrict");

                    b.ToTable("Sector","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.StatusTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("StatusTask","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Task", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AggregateUri")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateValidation")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ExternalCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("IdAccount");

                    b.Property<int?>("IdPredio");

                    b.Property<int>("IdProject");

                    b.Property<int>("IdProspectoAreas");

                    b.Property<int>("IdStatusTask")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IdTypeTask");

                    b.Property<string>("Route")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Usercreation")
                        .HasColumnName("usercreation")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("IdPredio");

                    b.HasIndex("IdStatusTask");

                    b.HasIndex("IdTypeTask");

                    b.ToTable("Task","RentingCore");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.TypeTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("StatusRegister")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TypeTask","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Zona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("StatusRegister")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Usercreation")
                        .HasColumnName("usercreation")
                        .HasColumnType("nchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Zona","RentingCommon");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.ZonaProspectada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("Commentary")
                        .HasColumnName("commentary")
                        .HasColumnType("nchar(500)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdProyecto");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nchar(100)");

                    b.Property<string>("Reference")
                        .HasColumnName("reference")
                        .HasMaxLength(500);

                    b.Property<string>("StatusRegister")
                        .HasColumnType("nchar(10)");

                    b.Property<string>("StreetMain")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("StreetSecundary")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("Streetfour")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("Streetthree")
                        .HasColumnType("nchar(500)");

                    b.Property<string>("Usercreation")
                        .HasColumnName("usercreation")
                        .HasColumnType("nchar(50)");

                    b.Property<string>("Zona")
                        .HasColumnName("zona")
                        .HasColumnType("nchar(50)");

                    b.Property<string>("imagen")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("IdProyecto");

                    b.ToTable("ZonaProspectada","RentingCore");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetRoleClaims", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserClaims", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserLogins", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserRoles", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Realstate.Models.BaseDatos.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.AspNetUserTokens", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.District", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.Management", "IdManagementNavigation")
                        .WithMany("District")
                        .HasForeignKey("IdManagement")
                        .HasConstraintName("FK_District_Management");

                    b.HasOne("Realstate.Models.BaseDatos.Province", "IdProvinceNavigation")
                        .WithMany("District")
                        .HasForeignKey("IdProvince")
                        .HasConstraintName("FK_District_Province");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Management", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.Region", "IdRegionNavigation")
                        .WithMany("Management")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("FK_Management_Region");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Predio", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.ZonaProspectada", "IdZonaProspectadaNavigation")
                        .WithMany("Predio")
                        .HasForeignKey("IdZonaProspectada")
                        .HasConstraintName("FK_Predio_ZonaProspectada");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Project", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.Account", "IdAccountNavigation")
                        .WithMany("Project")
                        .HasForeignKey("IdAccount")
                        .HasConstraintName("FK_Project_Account");

                    b.HasOne("Realstate.Models.BaseDatos.Country", "IdContryNavigation")
                        .WithMany("Project")
                        .HasForeignKey("IdContry")
                        .HasConstraintName("FK_Project_Country")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Realstate.Models.BaseDatos.District", "IdDistrictNavigation")
                        .WithMany("Project")
                        .HasForeignKey("IdDistrict")
                        .HasConstraintName("FK_Project_District")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Realstate.Models.BaseDatos.Link", "IdLinkNavigation")
                        .WithMany("Project")
                        .HasForeignKey("IdLink")
                        .HasConstraintName("FK_Project_Link")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Realstate.Models.BaseDatos.Parish", "IdParishNavigation")
                        .WithMany("Project")
                        .HasForeignKey("IdParish")
                        .HasConstraintName("FK_Project_Parish")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Realstate.Models.BaseDatos.Province", "IdProvinceNavigation")
                        .WithMany("Project")
                        .HasForeignKey("IdProvince")
                        .HasConstraintName("FK_Project_Province")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Realstate.Models.BaseDatos.Sector", "IdSectorNavigation")
                        .WithMany("Project")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_Project_Sector")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Realstate.Models.BaseDatos.Zona", "Zona")
                        .WithMany("Project")
                        .HasForeignKey("ZonaId")
                        .HasConstraintName("FK_Project_Zona")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Province", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.Country", "IdCountryNavigation")
                        .WithMany("Province")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("FK_Province_Country");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Sector", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.District", "IdDistrictNavigation")
                        .WithMany("Sector")
                        .HasForeignKey("IdDistrict")
                        .HasConstraintName("FK_Sector_District");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.Task", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.Predio", "IdPredioNavigation")
                        .WithMany("Task")
                        .HasForeignKey("IdPredio")
                        .HasConstraintName("FK_Task_Predio");

                    b.HasOne("Realstate.Models.BaseDatos.StatusTask", "IdStatusTaskNavigation")
                        .WithMany("Task")
                        .HasForeignKey("IdStatusTask")
                        .HasConstraintName("FK_Task_StatusTask");

                    b.HasOne("Realstate.Models.BaseDatos.TypeTask", "IdTypeTaskNavigation")
                        .WithMany("Task")
                        .HasForeignKey("IdTypeTask")
                        .HasConstraintName("FK_Task_TypeTask");
                });

            modelBuilder.Entity("Realstate.Models.BaseDatos.ZonaProspectada", b =>
                {
                    b.HasOne("Realstate.Models.BaseDatos.Project", "IdProyectoNavigation")
                        .WithMany("ZonaProspectada")
                        .HasForeignKey("IdProyecto")
                        .HasConstraintName("FK_ZonaProspectada_Project");
                });
#pragma warning restore 612, 618
        }
    }
}
